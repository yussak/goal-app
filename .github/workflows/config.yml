# TODO:下の方にテストジョブがある。後ほどデプロイジョブと組み合わせる
# TODO:テスト・ビルド用とデプロイ用でファイル分けるかもしれない
name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-northeast-1 # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: example # set this to your Amazon ECR repository name
  ECS_CLUSTER: example # set this to your Amazon ECS cluster name
  ECS_SERVICE: example # set this to your Amazon ECS service name

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: AUTO_DEPLOY_TO_ECS

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push image for ECR backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest

      - name: Build and push image for ECR frontend
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest

      - name: Force a new deployment
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --force-new-deployment

# name: CI
# on: [push]

# jobs:
#   backend_build_and_test:
#     name: backend build and test
#     runs-on: ubuntu-latest
#     steps:
#       - name: check out code
#         uses: actions/checkout@v3
#       - name: Setup Go
#         uses: actions/setup-go@v3
#         with:
#           go-version: "1.20.5"

#       - name: Go build & test
#         run: |
#           cd backend
#           go build .
#           go test -v

#   frontend_build_and_test:
#     name: frontend build and test
#     runs-on: ubuntu-latest
#     steps:
#       - name: check out code
#         uses: actions/checkout@v3
#       - name: Setup Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: "18.16.0"

#       - name: frontend install & build
#         working-directory: ./frontend
#         run: |
#           yarn install
#           yarn run build

#       - name: frontend test
#         uses: cypress-io/github-action@v3
#         with:
#           working-directory: ./frontend
#           start: yarn run start
#           wait-on: "http://localhost:3000"
#           wait-on-timeout: 120
#           command: npx cypress run

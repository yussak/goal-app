name: Deploy Backend to Amazon ECS
on:
  push:
    paths:
      - "backend/**"
    branches:
      - release-*

defaults:
  run:
    working-directory: backend

env:
  AWS_REGION: ap-northeast-1

  ECR_REPOSITORY: app-repo
  BACKEND_TAG: backend

  ECS_CLUSTER: app-cluster
  ECS_SERVICE_BACKEND: backend

  # todo:この値でいいのか確認
  ECS_TASK_DEFINITION: app-task
  CONTAINER_NAME: backend

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: AUTO_DEPLOY_TO_ECS

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install goalng-migrate
        run: |
          curl -L https://packagecloud.io/golang-migrate/migrate/gpgkey |   sudo apt-key add -
          echo "deb https://packagecloud.io/golang-migrate/migrate/ubuntu/ $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/migrate.list
          sudo apt-get update
          sudo apt-get install -y migrate

      - name: Retrieve DB Hostname from SSM
        run: |
          echo "DB_HOST=$(aws ssm get-parameter --name /db/hostname --query 'Parameter.Value' --output text)" >> $GITHUB_ENV

      - name: Get ECS service network configuration
        run: |
          NETWORK_CONFIG=$(aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE_BACKEND }} \
            --query 'services[0].networkConfiguration' \
            --output json)
          echo 'NETWORK_CONFIG<<EOF' >> $GITHUB_ENV
          echo "$NETWORK_CONFIG" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Run database migration task
        run: |
          aws ecs run-task \
            --cluster ${{ env.ECS_CLUSTER }} \
            --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            --overrides '{
              "containerOverrides": [{
                "name": "${{ env.CONTAINER_NAME }}",
                "command": ["migrate -path db/migrations -database "mysql://${{ secrets.DB_USERNAME }}:${{ secrets.DB_PASSWORD }}@tcp(${{ env.DB_HOST }})/${{ secrets.DB_NAME }}" up"]
              }]
            }' \
            --network-configuration '${{ env.NETWORK_CONFIG }}' \
            --launch-type FARGATE
      # todo:本番デプロイ時に実行できるかを確認
      # - name: Run DB migration
      # run: |
      #   migrate -path db/migrations -database "mysql://${{ secrets.DB_USERNAME }}:${{ secrets.DB_PASSWORD }}@tcp(${{ env.DB_HOST }})/${{ secrets.DB_NAME }}" up
      # run: |
      #   migrate -path db/migrations -database "mysql://${{ secrets.DB_USERNAME }}:${{ secrets.DB_PASSWORD }}@tcp(${{ env.DB_HOST }})/${{ secrets.DB_NAME }}" up
      #   aws ecs run-task \
      #   --cluster ${{ env.ECS_CLUSTER }} \
      #   --task-definition ${{ env.ECS_TASK_DEFINITION }} \
      #   --overrides '{
      #     "containerOverrides": [{
      #       "name": "${{ env.CONTAINER_NAME }}",
      #       "command": ["migrate", "-path", "/migrations", "-database", "mysql://${{ secrets.DB_USERNAME }}:${{ secrets.DB_PASSWORD }}@tcp(${{ secrets.DB_HOST }})/${{ secrets.DB_NAME }}", "up"]
      #     }]
      #   }' \
      #   --launch-type FARGATE \
      #   --network-configuration '{
      #     "awsvpcConfiguration": {
      #       "subnets": ["${{ secrets.PRIVATE_SUBNET_ID }}"],
      #       "securityGroups": ["${{ secrets.SECURITY_GROUP_ID }}"]
      #     }
      #   }'

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push image for ECR backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile.prod
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.BACKEND_TAG }}-latest

      - name: Force a new deployment for Backend
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE_BACKEND }} --force-new-deployment

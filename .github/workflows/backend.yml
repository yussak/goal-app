name: Deploy Backend to Amazon ECS
on:
  push:
    paths:
      - "backend/**"
    branches:
      - release-*

defaults:
  run:
    working-directory: backend

env:
  AWS_REGION: ap-northeast-1

  ECR_REPOSITORY: app-repo
  BACKEND_TAG: backend

  ECS_CLUSTER: app-cluster
  ECS_SERVICE_BACKEND: backend

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: AUTO_DEPLOY_TO_ECS

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install goalng-migrate
        run: |
          curl -L https://packagecloud.io/golang-migrate/migrate/gpgkey | apt-key add -
          echo "deb https://packagecloud.io/golang-migrate/migrate/ubuntu/ $(lsb_release -sc) main" > /etc/apt/sources.list.d/migrate.list
          apt-get update
          apt-get install -y migrate

      - name: Retrieve DB Hostname from SSM
        run: |
          echo "DB_HOST=$(aws ssm get-parameter --name /db/hostname --query 'Parameter.Value' --output text)" >> $GITHUB_ENV

      # todo:本番デプロイ時に実行できるかを確認
      - name: Run DB migration
        run: |
          migrate -path db/migrations -database "mysql://${{ secrets.DB_USERNAME }}:${{ secrets.DB_PASSWORD }}@tcp(${{ env.DB_HOST }})/${{ secrets.DB_NAME }}" up

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push image for ECR backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile.prod
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.BACKEND_TAG }}-latest

      - name: Force a new deployment for Backend
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE_BACKEND }} --force-new-deployment
